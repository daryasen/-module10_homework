// factorial.test.js. граничные случаи 
const factorial = require('./factorial');

describe('Функция factorial', () => {
  // ... предыдущие тесты ...

  it('должна правильно обрабатывать очень большие числа', () => {
    // Мы ожидаем, что функция справится с вычислением факториала для больших чисел
    expect(factorial(20)).toBe(2432902008176640000);
    expect(factorial(25)).toBe(15511210043330985984000000);
    expect(factorial(50)).toBe(3186080489705293444879893344616523459825122144999720512340662903307339381481234567890);
  });

  it('должна обрабатывать очень большие натуральные числа быстро', () => {
    // Мы ожидаем, что функция будет работать достаточно быстро для больших натуральных чисел
    expect(() => factorial(100)).not.toThrow();
    expect(() => factorial(1000)).not.toThrow();
    expect(() => factorial(10000)).not.toThrow();
  });

  it('должна выбрасывать ошибку для очень больших отрицательных чисел', () => {
    expect(() => factorial(-100)).toThrowError("Факториал не определен для отрицательных чисел.");
    expect(() => factorial(-1000)).toThrowError("Факториал не определен для отрицательных чисел.");
    expect(() => factorial(-10000)).toThrowError("Факториал не определен для отрицательных чисел.");
  });

  it('должна возвращать NaN для нечисловых входных значений', () => {
    expect(() => factorial('abc')).toThrowError("Входное значение должно быть числом.");
    expect(() => factorial({})).toThrowError("Входное значение должно быть числом.");
    expect(() => factorial(null)).toThrowError("Входное значение должно быть числом.");
  });
});
